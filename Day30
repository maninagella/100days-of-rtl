// MOD 10 counter usign 7490
module Counter_mod10_even_odd(input MS1,MS2,MR1,MR2,rst,Clk,
                    output [3:0] Q,Qbar);
					
					
	IC_7490 IC_7490(MS1,MS2,MR1,MR2,rst,Q[3],Clk,Q,Qbar);
	
endmodule
    
// Test Bench for a synchrounous counter
module s_counter_tb();



reg MS1,MS2,MR1,MR2,rst,Clk;
wire [3:0] Q,Qbar;



//Counter_mod2 C1(MS1,MS2,MR1,MR2,rst,Clk,Q,Qbar);
//Counter_mod5 C1(MS1,MS2,MR1,MR2,rst,Clk,Q,Qbar);
Counter_mod10_even_odd C1(MS1,MS2,MR1,MR2,rst,Clk,Q,Qbar);

always #5 Clk=~Clk; 
 
task initialize();
 begin
   MS1=1'b0;
   MS2=1'b0;
   MR1=1'b0;
   MR2=1'b0;
   rst=1'b0;
  end
endtask
   
initial
 begin
  Clk=1'b0;
 initialize();

#10 rst=1'b1;  

#100 $finish;

end

endmodule

  
//mod counter Asyncronous
module IC_7490(input MS1,MS2,MR1,MR2,rst,CP0_bar,CP1_bar,
               output [3:0] Q,Qbar);
    
	wire Set,Clr,s;
	
	
	nand g1(Set,MS1,MS2);
	nand g2(Clr,MR1,MR2);
	and  g3(s,Q[1],Q[2]);
	
	//mod 2 counter
	JK_ff JK1(1'b1,1'b1,rst,CP0_bar,Set,Clr,Q[0],Qbar[0]);
	
   //mod 5 counter	
	JK_ff JK2(Qbar[3],1'b1,rst,CP1_bar,Set,Clr,Q[1],Qbar[1]);
	JK_ff JK3(1'b1,1'b1,rst,Q[1],Set,Clr,Q[2],Qbar[2]);
	SR_ff SR1(s,Q[3],rst,CP1_bar,Set,Clr,Q[3],Qbar[3]);
	

endmodule	
// JK flip flop
module JK_ff(input J,K,rst,clk,preset,clear,
          output reg q,
		  output qbar);
		  
always @(negedge clk or negedge rst) 
 begin
   if(!rst)
       q=1'b0;
	else if(!clear)
	   q=1'b0;
	else if(!preset)
	    q=1'b1;
	else 
	  begin
	  case({J,K})
	  0: q=q;
	  1: q=1'b0;
	  2: q=1'b1;
	  3: q=qbar;
	  endcase
   end
 end
 
    assign qbar=~q;
endmodule 
	  // SR flip flop
module SR_ff(input s,r,rst,clk,preset,clear,
          output reg q,
		  output qbar);
		  
always @(negedge clk or negedge rst) 
 begin
   if(!rst)
       q=1'b0;
	else if(!clear)
	   q=1'b0;
	else if(!preset)
	    q=1'b1;
	else 
	  begin
	  case({s,r})
	  0: q=q;
	  1: q=1'b0;
	  2: q=1'b1;
	  3: q=1'bx;
	  endcase
   end
 end
 
    assign qbar=~q;
endmodule 
	  
	
