module mux2_1(input s,i0,i1,output y);

wire sbar;

assign sbar=~s;

//dataflow model

assign y=(i1&sbar)|(i0&s);

endmodule

module mux2x1_tb;

reg i0;
reg i1;
reg s;
wire y;

integer i;

mux2_1 DUT(.s(s),.i0(i0),.i1(i1),.y(y));

initial
 begin
  $dumpfile("mux2x1.vcd");
  $dumpvars(0,mux2x1_tb);
end
 
initial 

    begin
	    #1 $monitor($time,"%b %b %b :%b",i1,i0,s,y);
		 i0=1'b0;i1=1'b0;s=1'b0;
       for(i=0;i<8;i=i+1) begin
	     if(i%2==1) #4 i0=1'b1;
		 else #4 i0=1'b0;
		 if(i>3) #4 i1=1'b1;
		 else #4 i1=1'b0;
		 #4 s=$random;
        end
		#10 $finish;
    end
endmodule	

module mux4x1#(parameter INPUTS=4,SEL=2)
              (input [INPUTS-1:0]i,
			   input [SEL-1:0]s,
			      output y);
	wire t0,t1;
	
  mux2_1 m1(s[0],i[0],i[1],t0);
  mux2_1 m2(s[0],i[2],i[3],t1);
  mux2_1 m3(s[1],t0,t1,y);
  
  endmodule
module mux4x1_tb;

reg [3:0]i;
reg [1:0]s;
wire y;



mux4x1 DUT(i,s,y);

initial
 begin
  $dumpfile("mux4x1.vcd");
  $dumpvars(0,mux4x1_tb);
end
 
initial 

    begin
	     #1 i=0;s=0;
	    #1 $monitor($time,"   %b  %b :%b",i,s,y);
        repeat(6)
		begin
		 #4 i=$random;         
		 #4 s=$random;
          end		
		#10 $finish;
    end
endmodule	
  
  
  
			   
