module ripple_carry_adder(input [3:0] D1,
                          input [3:0] D2,
						  input cin,
						  output [3:0]sum,
						  output cout);
						  
		wire [2:0] carry;
		
		full_adder  FA1(D1[0],D2[0],cin,sum[0],carry[0]);
		full_adder  FA2(D1[1],D2[1],carry[0],sum[1],carry[1]);
		full_adder  FA3(D1[2],D2[2],carry[1],sum[2],carry[2]);
		full_adder  FA4(D1[3],D2[3],carry[2],sum[3],cout);
		
endmodule
		
//Full Adder
module full_adder(input a,
                  input b,
				  input cin,
				  output sum,
				  output cout);
				  
	
	assign sum =a^b^cin;
	assign cout= (a&b)|(cin&(a^b));
	
endmodule
//Structural representaion of Half_adder

module halfadder_struct(input a,b,output sum,carry);

 xor G1(sum,a,b);
 and G2(carry,a,b);
 
endmodule
//  multiplier 2 four bit multipler

module multiplier (input [3:0] a,b,
                              output [7:0] y);
							  
	wire [3:0] t0,t1,t2,t3,s;
	wire c1,c2,c3,c4,c5,c6,c7;
	
	assign t0 = b[0]? a : 4'h0;
	assign t1 = b[1]? a : 4'h0;
	assign t2 = b[2]? a : 4'h0;
	assign t3 = b[3]? a : 4'h0;
	
	
	assign y[0] = t0[0];
	
 halfadder_struct  ha1(t0[1],t1[0],y[1],c1);
 
 full_adder fa1(t0[2],t1[1],t2[0],s[0],c2);
 
 add4_bit ad4({t0[3],t1[2],t2[1],t3[0]},s[1],{c4,c3});
 
 full_adder fa2(t1[3],t2[2],t3[1],s[2],c5);
 
 full_adder fa3(t2[3],t3[2],c4,s[3],c6);
 
 ripple_carry_adder rpa1(s,{c5,c3,c2,c1},1'b0,y[5:2],c7);
 
 full_adder fa4(t3[3],c6,c7,y[6],y[7]);
 
 endmodule
module tb_multiplier();

reg [3:0] a;
reg [3:0] b;


wire [7:0]y;

carry_save_multiplier DUT(a,b,y);

task stimulus(input [3:0] d1,d2);
  begin
    a=d1;
	b=d2;
  end
endtask


initial
  $monitor($time,"a = %d b = %d :y = %d ",a,b,y);

initial
   begin

     stimulus(4'h0,4'h0);
 #10 stimulus(4'ha,4'h3);
 #10 stimulus(4'h5,4'h7);
 #10 stimulus(4'h3,4'h9);
 #10 stimulus(4'ha,4'h3);
 #10 stimulus(4'hf,4'hf);
 
 #30 $finish;
 end
 
 endmodule
 
 
 
 
 
 
 
 
